#Data 01
#run trimmomatic and fastqc on raw FACS reads 
bash ./data_01/flowsort_curation_01a.sh ./data_01/*R1_001.fastq.gz

#Whole cell data 02
#subset whole cell reads from (Long et al., 2016) (BioProject PRJNA285268) 
bash ./wholecell_data_02/subset_02a.sh /path/to/downloaded/wholecell_data

#Fisher's exact test 03
#align MIC and MAC trimmed FACS reads to combined reference 
bash ./fishers_exact_03/fishers_rerun_2_03a.sh ./data_01/*R1_001.trim.fastq.gz
#align whole cell subsets to combined reference 
bash ./fishers_exact_03/wholecell_subset/flowsort_curation_wc_2_03b.sh ./data_01/*R1_001.trim.fastq.gz
#remove unmapped reads from resulting bam files
samtools view -b -h -F 4 file.bam > mapped.bam
#count reads aligned to the MIC or MAC reference for each resulting bam file
samtools view FACSsample_toconcatref_mapped.bam | grep -v "XA:" | grep -v "SA:" | awk '$3 ~ /scf/' | wc -l 
samtools view FACSsample_toconcatref_mapped.bam | grep -v "XA:" | grep -v "SA:" | awk '$3 ~ /chr/' | wc -l 
#run a fisher's exact test on the resulting counts
R ./fishers_exact_03/fishers_rerun_ftests_03c.R 

#Simulations 04 
#remove mitochondrial sequence to generate mac simulated reads 
awk '{ if ((NR>1)&&($0~/^>/)) { printf("\n%s", $0); } else if (NR==1) { printf("%s", $0); } else { printf("\t%s", $0); } }' mac.genome.fasta | grep -v -Ff remove.txt - | tr "\t" "\n" > mac.genome_nomito.fasta
#generate simulated mic, mac, and whole cell data at a 2:45 mic to mac ratio
bash ./simulations_04/wc_simulations_04a.sh
#align simulated whole cell reads to the combined reference genome 
bash ./simulations_04/flowsortcuration_2_wc_04b.sh
#align simulated MIC and MAC reads to the combined reference genome 
bash ./simulations_04/flowsortcuration_2_mic_mac_04c.sh
#remove unmapped reads from resultsing bam files 
samtools view -b -h -F 4 file.bam > mapped.bam
#generate simulated mic, mac, and whole cell data at a 1:1 mic to mac ratio
bash ./simulations_04/simulations_1x/wc_simulations_1x_04d.sh
#align simulated whole cell reads to the combined reference genome 
bash ./simulations_04/simulations_1x/flowsortcuration_2_wc_04e.sh

#Coverage MDS and IES 05 
#converts IES coordinates in supercontigs to IES coordinates in mic chromosomes
R ./coverage_05/merge_contigs_05a.R
#creates a coverage file of mic samples, mac samples, and wc samples using Samtools depth
bash ./coverage_05/coverage_05b.sh
#for each sample - mic, mac, wholecell loops the coverage files generated by coverage_05b.sh back to analyze_coverage_allchromo_05d.R
bash ./coverage_05/mac_coverage/analyze_coverage_05c.sh *Mac*
bash ./coverage_05/mic_coverage/analyze_coverage_05c.sh *Mic*
bash ./coverage_05/wc_coverage/analyze_coverage_05c.sh *wc*

#IES Retention Scores 06
#creates bedfile of chr, IES_in_chr_start, IES_in_chr_end, and IES name using tsv files in ./coverage folder
bash ./retention_scores_06/make_bedfile_06a.sh ./coverage_05/chr*inmic.tsv
#takes bedfile positions and using bedtools getfasta and the micronucealr reference genome and pulls out all the basepairs in that bedfile range to create MAC+IES reference
bash ./retention_scores_06/make_IESfasta_06b.sh ./retention_scores_06/chr*.bed
#aligns the Mac and Mic flowsorted samples to the mac+IES_reference.fasta reference and creates a bam folder
bash ./retention_scores_06/IRSscore_alignment_2_06c.sh ./data_01/*R1_001.trim.fastq.gz
#creates a chain file for each chromosome 
R ./retention_scores_06/IRS/mic.mac.chain_perchromosome_06d.R 
#takes chain files 1-5 and mic_inIES files 1-5 and loops them through create_mac_excisionsites_06f.R to create chrX_mac_excisionsites.tsvs for each chromosome
bash ./retention_scores_06/IRS/create_mac_excisions_06e.sh ./retention_scores_06/IRS/*chain.tsv*
#calcualtes the IRS+ and IRS- 
bash ./retention_scores_06/IRS/calculate_IRS_mac_06g.sh chr*_IESs_mac_excisionsites.tsv 
bash ./retention_scores_06/IRS/calculate_IRS_mic_06g.sh chr*_IESs_mac_excisionsites.tsv 
#consolidates scores over all 5 chromosomes and graphs them in a histogram
R ./retention_scores_06/IRS/calculateIRSscores_all_06h.R

#Contamination 
#converts unmapped reads in the bam to fastqs, assembles them with spades, and blasts them
bash ./check_contamination_07/blast_check/mic_contamination/blast_unmapped_07a.sh
bash ./check_contamination_07/blast_check/mac_contamination/blast_unmapped_07a.sh
